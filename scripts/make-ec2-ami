#!/usr/bin/env python3

import argparse
import os
import sys
import subprocess
import json
import time

class Ec2ImageBuild:

    def __init__(self, bucket, region, raw_image, permission=False):
        self.bucket = bucket
        self.region = region
        self.permission = permission
        self.raw_image_path = raw_image
        self.raw_image = os.path.basename(self.raw_image_path)

    def run(self):
        # self.upload_image(self.raw_image_path, self.bucket)
        snapshot_id = self.import_snapshot(self.bucket, self.raw_image, self.region)
        self.register_image(self.region, snapshot_id)

    def upload_image(self, image_raw, bucket):
        result = subprocess.run(["aws", "--region", region, "s3", "cp", "--no-progress", image_raw, "s3://" + bucket], capture_output=True)

        if result.returncode != 0:
            sys.exit("Unable to upload image " + image_raw)

        print(result.stdout)

    def import_snapshot(self, bucket, image_name, region):

        container_string = ("Description=garden-linux,Format=raw,UserBucket={S3Bucket=%s,S3Key=%s}" % (bucket, image_name))
        result = subprocess.run(["aws", "--region", region, "ec2", "import-snapshot", "--disk-container", container_string], capture_output= True)
        if result.returncode != 0:
            sys.exit("Unable to create snapshot for " + image_name)

        doc = json.loads(result.stdout)
        task_id = doc["ImportTaskId"]
        status = doc["SnapshotTaskDetail"]["Status"]
        print("Creating Snapshot for %s, id: %s, status: %s" % (image_name, task_id, status))
        time.sleep(60)

        i = 0
        while i < 80 and status == "active":
            i += 1
            time.sleep(10)
            result = subprocess.run(["aws", "--region", region, "ec2", "describe-import-snapshot-tasks", "--import-task-ids", task_id], capture_output=True)
            if result.returncode != 0:
                sys.exit("Unable to create snapshot for %s: %s %s" % image_name, result.stdout, result.stderr)
            doc = json.loads(result.stdout)
            status = doc["ImportSnapshotTasks"][0]["SnapshotTaskDetail"]["Status"]
            if "SnapshotId" in doc["ImportSnapshotTasks"][0]["SnapshotTaskDetail"]:
                snapshot_id = doc["ImportSnapshotTasks"][0]["SnapshotTaskDetail"]["SnapshotId"]
        print("Snapshot id %s" % snapshot_id)
        return snapshot_id

    def register_image(self, region, snapshot_id):

        result = subprocess.run(["aws", "--region", region, "ec2", "register-image", 
            "--name", "garden-linux-bullseye-ec2", 
            "--description", "Garden Linux Testing", 
            "--root-device-name", "/dev/xvda",
            "--virtualization-type", "hvm",
            "--ena-support",
            "--architecture", "x86_64",
            "--block-device-mapping", "DeviceName=/dev/xvda,Ebs={DeleteOnTermination=True,SnapshotId=%s,VolumeType=gp2}" % snapshot_id],
            capture_output=True)
        print(result)

    @classmethod
    def _argparse_register(cls, parser):

        parser.add_argument(
            '--bucket',
            type=str,
            dest='bucket',
            help='Upload bucket',
            required=True
        )
        parser.add_argument(
            '--permission-public',
            action='store_true',
            help='Make snapshot and image public',
        )
        parser.add_argument(
            '--region',
            type=str,
            help="AWS region",
            required=True
        )
        parser.add_argument(
            'raw_image',
            type=str,
            help="RAW image file"
        )

    @classmethod
    def _main(cls):
        parser = argparse.ArgumentParser()
        cls._argparse_register(parser)
        args = parser.parse_args()

        ec2_img_build = cls(bucket=args.bucket, raw_image=args.raw_image, region=args.region, permission=args.permission_public)
        ec2_img_build.run()
 
if __name__ == '__main__':
    Ec2ImageBuild._main()
